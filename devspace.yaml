version: v2beta1
name: devspace-flask

# load vars from .env
vars:
  DATABASE_IMAGE: "database"
  DEVSPACE_ENV_FILE: ".env"

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      create_deployments --all     # 2. Deploy Helm charts and manifests specfied as "deployments"
      start_dev app1               # 3. Start dev mode "app" (see "dev" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      build_images --all -t $(git describe --always)    # 2. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 3. Deploy Helm charts and manifests specfied as "deployments"

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  app1:
    image: my-app
    context: ./backend
    dockerfile: ./backend/Dockerfile
    rebuildStrategy: ignoreContextChanges

  database:
    image: jaydockship/database
    context: ./database
    dockerfile: ./database/Dockerfile

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  my-deployment:
    # This deployment uses `kubectl` but you can also define `helm` deployments
    kubectl:
      manifests:
        - ./kube/kustomization
      kustomize: true

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  app1:
    # Search for the container that runs this image
    imageSelector: my-app
    containers:
      app1:
        # Replace the container image with this dev-optimized image (allows to skip image building during development)
        devImage: ${DOCKER_REPO}/base-app-dev:0.0.1
        workingDir: /src
        command: ["python", "main.py"]    
        sync:
        - path: ./backend:/src
          onUpload:
            restartContainer: true
        logs: {}
        # Open a terminal and use the following command to start it
        # terminal:
        #   command: ./devspace_start.sh
        # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
        ssh:
          enabled: true
        # Make the following commands from my local machine available inside the dev container
        proxyCommands:
          - command: devspace
          - command: kubectl
          - command: helm
          - command: git
    # Forward the following ports to be able access your application via localhost
    ports:
      - port: "8080"
    # Open the following URLs once they return an HTTP status code other than 502 or 503
    open:
      - url: http://localhost:8080

# Use the `commands` section to define repeatable dev workflows for this project 
commands:
  # build base dev docker image
  bdi-app:
    command: |-
      docker build -t ${DOCKER_REPO}/base-app-dev:0.0.1 -f ./backend/Dockerfile.dev ./backend

  bdi-db:
    command: |-
      docker build -t ${DOCKER_REPO}/database -f ./database/Dockerfile ./database
